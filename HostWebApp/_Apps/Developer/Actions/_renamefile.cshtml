@using System.Data.Entity;
@using Entropia.Framework.Entities
@using ResponseExtensions = MvcLib.Common.Mvc.ResponseExtensions

@{
    var id = IsPost ? Request.Form["id"].AsInt(0) : UrlData[0].AsInt(0);
    var newFileName = IsPost ? Request.Form["newFileName"] : UrlData[1];

    using (var ctx = new EntropiaCtx())
    {
        var result = ctx.DbFiles.Include(x => x.Children).Include(x => x.Parent).FirstOrDefault(x => x.Id == id);
        if (result != null && result.Children.Count == 0)
        {
            var folderName = VirtualPathUtility.AppendTrailingSlash(result.Parent.VirtualPath);

            var fName = Path.GetFileNameWithoutExtension(newFileName);
            var fExtension = Path.GetExtension(newFileName);

            result.Name = fName;
            result.Extension = fExtension;
            result.VirtualPath = string.Format("{0}{1}", folderName, newFileName);

            ctx.SaveChanges();

            /* remove do cache após alterações */
            var cacheKey = string.Format(result.IsDirectory
                ? "VirtualDirectory:{0}"
                : "VirtualFile:{0}", result.VirtualPath);
            
            EntropiaCache.Remove(cacheKey);
            if (!result.IsDirectory)
            {
                var hashKey = string.Format("Hash:{0}", result.VirtualPath);
                EntropiaCache.Remove(hashKey);
            }

            ResponseExtensions.WriteAjax(Response, new { success = true });
            return;
        }

        Response.StatusCode = 404;
        ResponseExtensions.WriteAjax(Response, new { success = false, msg = "Arquivo não encontrado" });
        return;
    }
}